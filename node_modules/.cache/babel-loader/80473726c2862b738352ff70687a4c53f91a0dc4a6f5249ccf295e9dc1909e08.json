{"ast":null,"code":"import _objectSpread from\"C:/Users/MATHEUS-ANT\\xC3O/Desktop/M-PROJETOS/raquel-pinheiro-site/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{supabase}from'./supabase';// Funções para gerenciar agendamentos\nexport const bookingService={// Salvar novo agendamento\nasync createBooking(bookingData){try{// Verificar se o Supabase está configurado corretamente\nif(supabase.from&&typeof supabase.from==='function'&&supabase.from().insert){const{data,error}=await supabase.from('bookings').insert([bookingData]).select();if(error)throw error;return data[0];}else{// Fallback para localStorage quando Supabase não estiver configurado\nconst bookings=JSON.parse(localStorage.getItem('bookings')||'[]');const newBooking=_objectSpread(_objectSpread({id:Date.now().toString()},bookingData),{},{createdAt:new Date().toISOString()});bookings.push(newBooking);localStorage.setItem('bookings',JSON.stringify(bookings));return newBooking;}}catch(error){console.error('Erro ao criar agendamento:',error);throw error;}},// Buscar todos os agendamentos\nasync getAllBookings(){try{// Verificar se o Supabase está configurado corretamente\nif(supabase.from&&typeof supabase.from==='function'&&supabase.from().select){const{data,error}=await supabase.from('bookings').select('*').order('date',{ascending:true});if(error)throw error;return data||[];}else{// Fallback para localStorage quando Supabase não estiver configurado\nconst bookings=JSON.parse(localStorage.getItem('bookings')||'[]');return bookings.sort((a,b)=>new Date(a.date)-new Date(b.date));}}catch(error){console.error('Erro ao buscar agendamentos:',error);return[];}},// Atualizar status do agendamento\nasync updateBookingStatus(id,status){try{// Verificar se o Supabase está configurado corretamente\nif(supabase.from&&typeof supabase.from==='function'&&supabase.from().update){const{data,error}=await supabase.from('bookings').update({status}).eq('id',id).select();if(error)throw error;return data[0];}else{// Fallback para localStorage quando Supabase não estiver configurado\nconst bookings=JSON.parse(localStorage.getItem('bookings')||'[]');const bookingIndex=bookings.findIndex(b=>b.id===id);if(bookingIndex!==-1){bookings[bookingIndex].status=status;localStorage.setItem('bookings',JSON.stringify(bookings));return bookings[bookingIndex];}throw new Error('Agendamento não encontrado');}}catch(error){console.error('Erro ao atualizar agendamento:',error);throw error;}},// Excluir agendamento\nasync deleteBooking(id){try{// Verificar se o Supabase está configurado corretamente\nif(supabase.from&&typeof supabase.from==='function'&&supabase.from().delete){const{error}=await supabase.from('bookings').delete().eq('id',id);if(error)throw error;return true;}else{// Fallback para localStorage quando Supabase não estiver configurado\nconst bookings=JSON.parse(localStorage.getItem('bookings')||'[]');const filteredBookings=bookings.filter(b=>b.id!==id);localStorage.setItem('bookings',JSON.stringify(filteredBookings));return true;}}catch(error){console.error('Erro ao excluir agendamento:',error);throw error;}}};// Funções para gerenciar configurações\nexport const configService={// Salvar configuração de horários\nasync saveScheduleConfig(config){try{// Verificar se o Supabase está configurado corretamente\nif(supabase.from&&typeof supabase.from==='function'&&supabase.from().upsert){const{data,error}=await supabase.from('schedule_config').upsert([{id:1,config}]).select();if(error)throw error;return data[0];}else{// Fallback para localStorage quando Supabase não estiver configurado\nlocalStorage.setItem('scheduleConfig',JSON.stringify(config));return{id:1,config};}}catch(error){console.error('Erro ao salvar configuração:',error);throw error;}},// Buscar configuração de horários\nasync getScheduleConfig(){try{// Verificar se o Supabase está configurado corretamente\nif(supabase.from&&typeof supabase.from==='function'&&supabase.from().select){const{data,error}=await supabase.from('schedule_config').select('config').eq('id',1).single();if(error&&error.code!=='PGRST116')throw error;return(data===null||data===void 0?void 0:data.config)||null;}else{// Fallback para localStorage quando Supabase não estiver configurado\nconst config=localStorage.getItem('scheduleConfig');return config?JSON.parse(config):null;}}catch(error){console.error('Erro ao buscar configuração:',error);return null;}}};","map":{"version":3,"names":["supabase","bookingService","createBooking","bookingData","from","insert","data","error","select","bookings","JSON","parse","localStorage","getItem","newBooking","_objectSpread","id","Date","now","toString","createdAt","toISOString","push","setItem","stringify","console","getAllBookings","order","ascending","sort","a","b","date","updateBookingStatus","status","update","eq","bookingIndex","findIndex","Error","deleteBooking","delete","filteredBookings","filter","configService","saveScheduleConfig","config","upsert","getScheduleConfig","single","code"],"sources":["C:/Users/MATHEUS-ANTÃO/Desktop/M-PROJETOS/raquel-pinheiro-site/src/database.js"],"sourcesContent":["import { supabase } from './supabase'\r\n\r\n// Funções para gerenciar agendamentos\r\nexport const bookingService = {\r\n  // Salvar novo agendamento\r\n  async createBooking(bookingData) {\r\n    try {\r\n      // Verificar se o Supabase está configurado corretamente\r\n      if (supabase.from && typeof supabase.from === 'function' && supabase.from().insert) {\r\n        const { data, error } = await supabase\r\n          .from('bookings')\r\n          .insert([bookingData])\r\n          .select()\r\n        \r\n        if (error) throw error\r\n        return data[0]\r\n      } else {\r\n        // Fallback para localStorage quando Supabase não estiver configurado\r\n        const bookings = JSON.parse(localStorage.getItem('bookings') || '[]')\r\n        const newBooking = {\r\n          id: Date.now().toString(),\r\n          ...bookingData,\r\n          createdAt: new Date().toISOString()\r\n        }\r\n        bookings.push(newBooking)\r\n        localStorage.setItem('bookings', JSON.stringify(bookings))\r\n        return newBooking\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao criar agendamento:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  // Buscar todos os agendamentos\r\n  async getAllBookings() {\r\n    try {\r\n      // Verificar se o Supabase está configurado corretamente\r\n      if (supabase.from && typeof supabase.from === 'function' && supabase.from().select) {\r\n        const { data, error } = await supabase\r\n          .from('bookings')\r\n          .select('*')\r\n          .order('date', { ascending: true })\r\n        \r\n        if (error) throw error\r\n        return data || []\r\n      } else {\r\n        // Fallback para localStorage quando Supabase não estiver configurado\r\n        const bookings = JSON.parse(localStorage.getItem('bookings') || '[]')\r\n        return bookings.sort((a, b) => new Date(a.date) - new Date(b.date))\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao buscar agendamentos:', error)\r\n      return []\r\n    }\r\n  },\r\n\r\n  // Atualizar status do agendamento\r\n  async updateBookingStatus(id, status) {\r\n    try {\r\n      // Verificar se o Supabase está configurado corretamente\r\n      if (supabase.from && typeof supabase.from === 'function' && supabase.from().update) {\r\n        const { data, error } = await supabase\r\n          .from('bookings')\r\n          .update({ status })\r\n          .eq('id', id)\r\n          .select()\r\n        \r\n        if (error) throw error\r\n        return data[0]\r\n      } else {\r\n        // Fallback para localStorage quando Supabase não estiver configurado\r\n        const bookings = JSON.parse(localStorage.getItem('bookings') || '[]')\r\n        const bookingIndex = bookings.findIndex(b => b.id === id)\r\n        if (bookingIndex !== -1) {\r\n          bookings[bookingIndex].status = status\r\n          localStorage.setItem('bookings', JSON.stringify(bookings))\r\n          return bookings[bookingIndex]\r\n        }\r\n        throw new Error('Agendamento não encontrado')\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar agendamento:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  // Excluir agendamento\r\n  async deleteBooking(id) {\r\n    try {\r\n      // Verificar se o Supabase está configurado corretamente\r\n      if (supabase.from && typeof supabase.from === 'function' && supabase.from().delete) {\r\n        const { error } = await supabase\r\n          .from('bookings')\r\n          .delete()\r\n          .eq('id', id)\r\n        \r\n        if (error) throw error\r\n        return true\r\n      } else {\r\n        // Fallback para localStorage quando Supabase não estiver configurado\r\n        const bookings = JSON.parse(localStorage.getItem('bookings') || '[]')\r\n        const filteredBookings = bookings.filter(b => b.id !== id)\r\n        localStorage.setItem('bookings', JSON.stringify(filteredBookings))\r\n        return true\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao excluir agendamento:', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\n// Funções para gerenciar configurações\r\nexport const configService = {\r\n  // Salvar configuração de horários\r\n  async saveScheduleConfig(config) {\r\n    try {\r\n      // Verificar se o Supabase está configurado corretamente\r\n      if (supabase.from && typeof supabase.from === 'function' && supabase.from().upsert) {\r\n        const { data, error } = await supabase\r\n          .from('schedule_config')\r\n          .upsert([{ id: 1, config }])\r\n          .select()\r\n        \r\n        if (error) throw error\r\n        return data[0]\r\n      } else {\r\n        // Fallback para localStorage quando Supabase não estiver configurado\r\n        localStorage.setItem('scheduleConfig', JSON.stringify(config))\r\n        return { id: 1, config }\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao salvar configuração:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  // Buscar configuração de horários\r\n  async getScheduleConfig() {\r\n    try {\r\n      // Verificar se o Supabase está configurado corretamente\r\n      if (supabase.from && typeof supabase.from === 'function' && supabase.from().select) {\r\n        const { data, error } = await supabase\r\n          .from('schedule_config')\r\n          .select('config')\r\n          .eq('id', 1)\r\n          .single()\r\n        \r\n        if (error && error.code !== 'PGRST116') throw error\r\n        return data?.config || null\r\n      } else {\r\n        // Fallback para localStorage quando Supabase não estiver configurado\r\n        const config = localStorage.getItem('scheduleConfig')\r\n        return config ? JSON.parse(config) : null\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao buscar configuração:', error)\r\n      return null\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}